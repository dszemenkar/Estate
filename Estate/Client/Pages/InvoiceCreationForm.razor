@page "/invoice/addline/{Id:int}"

@inject IInvoiceService InvoiceService
@inject IApartmentService ApartmentService
@inject ITenantService TenantService
@inject IParkingService ParkingService
@inject IToastService ToastService
@inject NavigationManager NavigationManager


<div>
    <h3 class="card-title text-info mb-3 ml-3">@Title fakturarad</h3>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <div class="form-group">
                    <label for="invoiceDate">Fakturadatum</label>
                    <p>@invoice.InvoiceDate.ToString("yyyy-MM-dd")</p>
                </div>
                <div class="form-group">
                    <p>Hyresgäst</p>
                    <p>@tenant.FirstName @tenant.LastName</p>
                    <p>@tenant.Email</p>
                </div>

                <EditForm Model="line" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="form-group">
                        <label for="description">Beskrivning</label>
                        <InputText id="description" @bind-Value="line.Description" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="amountInclTax" class="required">Summa</label>
                        <InputNumber id="amountInclTax" @bind-Value="line.AmountInclTax" class="form-control"></InputNumber>
                    </div>
                    <button type="submit" class="btn btn-success">Lägg till på faktura</button>

                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Invoice invoice { get; set; } = new Invoice();
    private InvoiceLine line { get; set; } = new InvoiceLine();
    private List<InvoiceLine> lines { get; set; } = new List<InvoiceLine>();
    private Tenant tenant { get; set; } = new Tenant();
    private string Title { get; set; } = "Lägg till";
    private Apartment apartment { get; set; } = new Apartment();

    protected override async Task OnInitializedAsync()
    {
        invoice = await InvoiceService.GetInvoice(Id);
        tenant = await TenantService.GetTenantForApartment(invoice.TenantId);
        apartment = await ApartmentService.GetApartment(tenant.ApartmentId.Value);
        lines = await InvoiceService.GetInvoiceLines(Id);

        SetValues();
    }

    private async void SetValues()
    {
        if (lines.Count == 0)
        {
            line.AmountInclTax = apartment.Price;
            line.Description = "Hyra för " + invoice.InvoiceDate.ToString("MMMM");
        }
        else
        {
            if (tenant.ParkingId.HasValue && lines.Count == 1)
            {
                var parking = await ParkingService.GetParkingSpace(tenant.ParkingId.Value);
                line.AmountInclTax = parking.Price;
                line.Description = "Parkeringsavgift för " + invoice.InvoiceDate.ToString("MMMM");
            }
        }
        this.StateHasChanged();
    }

    private async void HandleSubmit()
    {
        line.InvoiceId = invoice.Id;
        line.AmountExclTax = line.AmountInclTax * Convert.ToDecimal(0.8);
        await InvoiceService.AddLine(line);

        NavigationManager.NavigateTo("/invoice/edit/" + invoice.Id.ToString());
    }
}