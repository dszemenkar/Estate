@inject IApartmentService ApartmentService
@inject IToastService ToastService
@inject NavigationManager NavigationManager 

<EditForm Model="apartment" OnValidSubmit="AddNewApartment">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label for="title" class="required">Namn</label>
        <InputText id="title" @bind-Value="apartment.Title" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="number">Lägenhetsnummer</label>
        <InputNumber id="number" @bind-Value="apartment.Number" class="form-control"></InputNumber>
    </div>
    <div class="form-group">
        <label for="floor">Våning</label>
        <InputNumber id="floor" @bind-Value="apartment.Floor" class="form-control"></InputNumber>
    </div>
    <div class="form-group">
        <label for="sqmeters">Kvadratmeter</label>
        <InputNumber id="sqmeters" @bind-Value="apartment.SqMeters" class="form-control"></InputNumber>
    </div>
    <div class="form-group">
        <label for="price" class="required">Pris</label>
        <InputNumber id="price" @bind-Value="apartment.Price" class="form-control"></InputNumber>
    </div>
    <div class="form-check">
        <label for="isavailable">Tillgänglig</label>
        <InputCheckbox id="isavailable" @bind-Value="apartment.IsAvailable" class="form-check-input"></InputCheckbox>
    </div>
    <button type="submit" class="btn btn-success">Spara lägenhet</button>
</EditForm>

@code {
    private Apartment apartment = new Apartment();

    private async void AddNewApartment()
    {
        if (apartment.Number != 0 || apartment.Price != 0 || apartment.SqMeters != 0)
        {
            await ApartmentService.AddApartment(apartment);
            ToastService.ShowSuccess("Lägenheten är sparad!");
            NavigationManager.NavigateTo("/");
        }
        else
        {
            ToastService.ShowError("Du måste fylla i värden för att lägga till en ny lägenhet.");
        }

    }
}